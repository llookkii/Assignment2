    stages:
      - prebuild
      - test
      - build
      - deploy

    variables:
      FRONTEND_IMAGE_NAME: relevance-scanner-fe
      BACKEND_IMAGE_NAME: relevance-scanner-be
      FRONTEND_TEST_IMAGE_NAME: relevance-scanner-test-fe
      BACKEND_TEST_IMAGE_NAME: relevance-scanner-test-be
      IMAGE_VERSION: ${CI_COMMIT_SHORT_SHA}
      IMAGE_TAG: gcr.io/${GCP_PROJECT_ID}
      PIPELINE_RUNNER_TAG: gcp_ubuntu
      SERVER_RUNNER_TAG: gcp_ubuntu

    .cleanup_directory:
      script:
        - echo "Cleaning up the directory..."
        - rm -f *.env *.key *.pem || true
        - rm -f __pycache__/ .pytest_cache/ || true
        - rm -f *.log *.tmp || true
        - rm -f *.gitlab-ci.yml || true
        - rm -f .dockerignore || true
        - rm -f /tmp/gcloud-service-key.json || true
        - echo "Clean up is completed..."

    .gcloud_login:
      script:
        - echo ${GCLOUD_SERVICE_KEY} | base64 -d > /tmp/gcloud-service-key.json
        - export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcloud-service-key.json
        - gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}
        - gcloud config set project ${GCP_PROJECT_ID}
        - gcloud auth configure-docker

    validate-frontend-build:
      stage: prebuild
      tags:
        - ${PIPELINE_RUNNER_TAG}
      before_script:
        - !reference [ .cleanup_directory, script ]
      script:
        - echo "Validating frontend Docker build..."
        - docker build -t ${IMAGE_TAG}/${FRONTEND_TEST_IMAGE_NAME}:${IMAGE_VERSION} -f relevance-scanner-fe/Dockerfile relevance-scanner-fe/ || exit 1
      after_script:
        - docker rmi ${IMAGE_TAG}/${FRONTEND_TEST_IMAGE_NAME}:${IMAGE_VERSION} || true

    validate-backend-build:
      stage: prebuild
      tags:
        - ${PIPELINE_RUNNER_TAG}
      before_script:
        - !reference [.cleanup_directory, script]
      script:
        - echo "Validating backend Docker build..."
        - docker build -t ${IMAGE_TAG}/${BACKEND_TEST_IMAGE_NAME}:${IMAGE_VERSION} -f Term-Project-Flask-Container/Dockerfile Term-Project-Flask-Container/ || exit 1
      after_script:
        - docker rmi ${IMAGE_TAG}/${BACKEND_TEST_IMAGE_NAME}:${IMAGE_VERSION} || true

    test-code-standard-backend:
      stage: test
      tags:
        - ${PIPELINE_RUNNER_TAG}
      before_script:
        - !reference [.cleanup_directory, script]
        - python3 -m venv venv
        - source venv/bin/activate
        - pip install --upgrade pip
        - pip install pylint
      script:
        - echo "Running Pylint for backend linting..."
        - pylint Term-Project-Flask-Container/ || true
      after_script:
        - deactivate || echo "Deactivation failed (Perhaps environment wasn't activated)"
        - rm -rf venv

    test-format-backend:
      stage: test
      tags:
        - ${PIPELINE_RUNNER_TAG}
      before_script:
        - !reference [.cleanup_directory, script]
        - python3 -m venv venv
        - source venv/bin/activate
        - pip install black
      script:
        - echo "Checking code formatting for backend with Black..."
        - black --check Term-Project-Flask-Container/ || true
      after_script:
        - deactivate || echo "Deactivation failed (Perhaps environment wasn't activated)"
        - rm -rf venv

    test-security-backend:
      stage: test
      tags:
          - ${PIPELINE_RUNNER_TAG}
      before_script:
        - !reference [.cleanup_directory, script]
        - python3 -m venv venv
        - source venv/bin/activate
        - pip install bandit
      script:
        - echo "Running Bandit for security checks on backend..."
        - bandit -r Term-Project-Flask-Container/ || true
      after_script:
        - deactivate || echo "Deactivation failed (Perhaps environment wasn't activated)"
        - rm -rf venv

    test-code-standard-frontend:
      stage: test
      tags:
        - ${PIPELINE_RUNNER_TAG}
      before_script:
        - !reference [.cleanup_directory, script]
        - npm install eslint
      script:
        - echo "Running ESLint for frontend linting..."
        - eslint relevance-scanner-fe/ --max-warnings 0 || true

    test-format-frontend:
      stage: test
      tags:
        - ${PIPELINE_RUNNER_TAG}
      before_script:
        - !reference [.cleanup_directory, script]
        - npm install prettier
      script:
        - echo "Checking code formatting for frontend with Prettier..."
        - npx prettier --check "relevance-scanner-fe/**/*.{js,css,html}" || true

    test-security-frontend:
      stage: test
      tags:
          - ${PIPELINE_RUNNER_TAG}
      before_script:
        - !reference [.cleanup_directory, script]
        - cd relevance-scanner-fe
        - npm install
        - npm install eslint
      script:
        - echo "Running npm audit for frontend dependencies..."
        - npm audit --audit-level=moderate || true
      after_script:
        - cd ..

    build-frontend:
      needs:
        - test-code-standard-frontend
        - test-security-frontend
        - test-format-frontend
        - validate-frontend-build
      stage: build
      tags:
        - ${PIPELINE_RUNNER_TAG}
      before_script:
        - !reference [.cleanup_directory, script]
        - !reference [.gcloud_login, script]
      script:
        - echo "Building Docker image for the frontend..."
        - docker build -t ${IMAGE_TAG}/${FRONTEND_IMAGE_NAME}:${IMAGE_VERSION} -f relevance-scanner-fe/Dockerfile relevance-scanner-fe/
        - docker push ${IMAGE_TAG}/${FRONTEND_IMAGE_NAME}:${IMAGE_VERSION}
      after_script:
        - rm -f /tmp/gcloud-service-key.json
        - docker rmi ${IMAGE_TAG}/${FRONTEND_IMAGE_NAME}:${IMAGE_VERSION} || true

    build-backend:
      stage: build
      needs:
        - test-code-standard-backend
        - test-security-backend
        - test-format-backend
        - validate-backend-build
      tags:
        - ${PIPELINE_RUNNER_TAG}
      before_script:
        - !reference [.cleanup_directory, script]
        - !reference [.gcloud_login, script]
      script:
        - echo "Building Docker image for the backend..."
        - docker build -t ${IMAGE_TAG}/${BACKEND_IMAGE_NAME}:${IMAGE_VERSION} -f Term-Project-Flask-Container/Dockerfile Term-Project-Flask-Container/
        - docker push ${IMAGE_TAG}/${BACKEND_IMAGE_NAME}:${IMAGE_VERSION}
      after_script:
        - rm -f /tmp/gcloud-service-key.json
        - docker rmi ${IMAGE_TAG}/${BACKEND_IMAGE_NAME}:${IMAGE_VERSION} || true

    deploy-frontend:
      needs:
        - build-frontend
      stage: deploy
      tags:
        - ${SERVER_RUNNER_TAG}
      before_script:
        - !reference [.cleanup_directory, script]
        - !reference [.gcloud_login, script]
      script:
        - echo "Deploying the frontend to Cloud Run..."
        - gcloud run deploy ${FRONTEND_IMAGE_NAME} --image=gcr.io/${GCP_PROJECT_ID}/${FRONTEND_IMAGE_NAME}:${IMAGE_VERSION} --region=${CLOUD_RUN_REGION} --memory=4Gi --platform=managed --allow-unauthenticated --quiet
      after_script:
        - rm -f /tmp/gcloud-service-key.json

    deploy-backend:
      needs:
        - build-backend
      stage: deploy
      tags:
        - ${SERVER_RUNNER_TAG}
      before_script:
        - !reference [.cleanup_directory, script]
        - !reference [.gcloud_login, script]
      script:
        - echo "Deploying the backend to Cloud Run..."
        - gcloud run deploy ${BACKEND_IMAGE_NAME} --image=gcr.io/${GCP_PROJECT_ID}/${BACKEND_IMAGE_NAME}:${IMAGE_VERSION} --region=${CLOUD_RUN_REGION} --platform=managed --port=8080 --memory=4Gi --vpc-connector=fe-be-connector --quiet
      after_script:
        - rm -f /tmp/gcloud-service-key.json
